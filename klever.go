//  Klever - Micro router framework for static web sites
package klever

import (
	"encoding/json"
	"github.com/gustavokuklinski/klever/scaffold"
	"html/template"
	"log"
	"net/http"
	"os"
	"path/filepath"
)

// Get HTTP port file from config.json
// This file is generated by Scaffold package
type Config struct {
	AppPort string
}

// Render templates.
// Use the directory tree and the scaffold package to set the right templates and
// directories of the project this function read two parameters:
// tplDir: the base [/pages] and tplFile: the file set on klever.Page(route, file)
func Layout(tplFile string, w http.ResponseWriter) {

	// [layout.html]
	layout := filepath.Join("includes", "layout.html")

	// [head.html]
	head := filepath.Join("includes", "head.html")

	// [nav.html]
	nav := filepath.Join("includes", "nav.html")

	// [footer.html]
	footer := filepath.Join("includes", "footer.html")

	// Get tplDir and tplFile to build the pages
	page := filepath.Join("pages", tplFile)

	// Parse template file
	tmpl, err := template.ParseFiles(layout, head, nav, footer, page)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := tmpl.ExecuteTemplate(w, "layout", nil); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}

// Render Route and Page.
// Usage:
// In the main function use: klever.Page(route, file)
func Page(route, file string) {

	// Use the route to set URL
	// Responsible to build the template
	http.HandleFunc(route, func(w http.ResponseWriter, r *http.Request) {

		// Layout function, use [/pages] as default folder to serve pages file
		Layout(file, w)
		log.Println("Getting page: " + route)
	})

}

// Start Klever in two steps:
// 1. Generate base directories and scaffold templates(Check the package: github.com/gustavokuklinski/klever/scaffold).
// 2. Read Json config file
// 3. Load a basic HTTP Server.
func Start() {
	// Call the package to generate base Scaffold:
	// 1. Template files
	// 2. Configuration files
	scaffold.GenerateScaffold()

	// Read config.json file to set the main port
	confFile, _ := os.Open("config.json")
	decoderConfig := json.NewDecoder(confFile)
	appConfig := Config{}
	err := decoderConfig.Decode(&appConfig)
	if err != nil {
		log.Println("Error reading config file")
	}

	// File server for static files(CSS, JS and Images) in folder [/assets]
	fs := http.FileServer(http.Dir("assets"))
	http.Handle("/assets/", http.StripPrefix("/assets/", fs))

	// Start webserver on port: 8080 - You can fit your need :)
	log.Println("Listening...")
	http.ListenAndServe(":"+appConfig.AppPort, nil)

}
